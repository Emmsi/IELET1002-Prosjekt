#include <Arduino.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>
#include <Zumo32U4.h>

Zumo32U4Encoders encoders;

/* Internett shit*/
// Internet og server ip/connection
const char *ssid = "ruter navn";
const char *password = "passord";
const char *mqtt_server = "xxxxx";
// Setter opp klienter
WiFiClient espClient;
PubSubClient client(espClient);
// datasendingsintervall
unsigned long previousMillis = 0;
unsigned long currentMillis = 0;
const int dataDelay = 500;

/* Speedometer shit*/
// 909.7 counts per revolution, wheel diameter = 122.52211349
// millimetersPerCount = 122.52211349/909.7 = 0.1346840865
const float milliMetersPerCount = 0.1346840865;
// encoder counts, wich will be coverted to length
int newCounts;
int lastCounts;
// variables for millis()
unsigned long timeAfterLastCount = 0;
unsigned long timeBeforeNewCount = 0;
unsigned long updateTime = 0;
float lengthInMilliMeters; // length descirbed in millimeters
// total lengths and counts for averaging speed
unsigned long totalLength = 0;
unsigned long totalCounts = 0;
// counter used for calculations of average speed
int counter = 0;
// actual speed
int speedInCmPerSec = 0;
// variables used to calculate average, max and speed over 70 %
int timeOverSeventyPercent = 0;
int maxSpeed = 0;
int averageSpeed = 0;
int totalSpeed = 0;
const int seventySpeed = 45.5; // maximum speed according to datasheet with 75:1 gear is 65cm/s. 65*0.7 = 45.5 cm/s

// Deklarerer funksjoner
int sixtySecUpdate();
int speedometer();
void callback(char *topic, byte *message, unsigned int length);
void reconnect();

void setup()
{
  Serial1.begin(115200); // Serial 1 is the received communication/UART from the ESP32
  Serial.begin(9600);    // Serial is the normal serial monitor communication

  analogReadResolution(12);

  // wifi connection setup
  Serial.setDebugOutput(true);
  Serial.println();
  Serial.println();
  Serial.println();

  for (uint8_t t = 4; t > 0; t--)
  {
    Serial.printf("[SETUP] BOOT WAIT %d...\n", t);
    Serial.flush();
    delay(1000);
  }

  WiFi.begin(ssid, password); // Connect to your wi-fi modem
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.println("Establishing connection to WiFi...");
    delay(1000);
  }

  Serial.println("Connected");
  Serial.println(WiFi.localIP());

  // setter serveren til mqtt, RPI port
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback); // fått mld, sender funksjon topic, meldingen, meldingens lengde
}

void loop()
{
  // Hvis ikke kobla til, koble til funksjon
  if (!client.connected())
  {
    reconnect();
  }
  client.loop();

  currentMillis = millis();
  if (currentMillis - previousMillis >= dataDelay)
  {
    previousMillis = currentMillis;
    // Splitter verdi inn i char og sender til mqtt input
    char tempString[8];
    dtostrf(speedometer(), 1, 2, tempString);
    client.publish("esp32/speedometer", tempString);
    Serial.println(speedometer());
  }
}

// tar inn funksjon topic, meldingen, meldingens lengde fra MQTT
void callback(char *topic, byte *message, unsigned int length)
{
  // kan bare sende en char i hver mld
  // løkke nedenfor setter sammen mld som ble sendt
  String messageTemp;

  for (int i = 0; i < length; i++)
  {
    messageTemp += (char)message[i];
  }
}

// kobler esp til mqtt og riktig topic
void reconnect()
{
  while (!client.connected())
  {
    if (client.connect("ESP8266Client"))
    {
      client.subscribe("esp32/speedometer");
    }
    else
    {
      delay(5000);
    }
  }
}

// calculates speed in cm/s and updates values for:
// totalCounts, totalSpeed, totalLength
int speedometer()
{
  timeBeforeNewCount = millis() - timeAfterLastCount;                                                    // setting time before getting and resetting encoders
  newCounts = ((encoders.getCountsAndResetLeft() + encoders.getCountsAndResetRight()) / 2) - lastCounts; // average encoder numbers for both motors
  lengthInMilliMeters = newCounts * milliMetersPerCount;                                                 // encoders converted to length in millimeters
  speedInCmPerSec = (lengthInMilliMeters / 10) / (millis() * 1000);                                      // calculate speed from millimeters and millis()

  // updating total values for later calculations
  totalSpeed += speedInCmPerSec;
  totalLength += lengthInMilliMeters;
  totalCounts += newCounts;

  // saving millis and encoder values for next time
  lastCounts = newCounts;
  timeAfterLastCount = timeBeforeNewCount;

  // this saves time that the speed is over 70% of max
  if (speedInCmPerSec > seventySpeed)
  {
    timeOverSeventyPercent += timeBeforeNewCount / 1000; // divide by 1000 to go from millis to sec
  }
  return speedInCmPerSec;
}

// this function gives average speed, max speed and time spent over 70% of max speed
// this function will run every 60 sec
int sixtySecUpdate()
{
  updateTime = millis();               // saving new time for next 60 sec run through
  averageSpeed = totalSpeed / counter; // calculating average

  // reset values to get new numbers for next 60 sec cycle
  counter = 0;
  totalSpeed = 0;
  timeOverSeventyPercent = 0;
}
